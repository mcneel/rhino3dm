cmake_minimum_required(VERSION 3.16)
project(rhino3dm)

set (CMAKE_CXX_STANDARD 14)

if (EMSCRIPTEN)
  set(RHINO3DM_JS "YES")
else()
  set(RHINO3DM_PY "YES")
endif()

if (${RHINO3DM_JS})
  message("Web Assembly Compile")
endif()

if (${RHINO3DM_PY})
  message("Python Compile")
  if(PYTHON_BINDING_LIB STREQUAL "NANOBIND")
    message("Using nanobind")
    add_compile_definitions( NANOBIND )
    if (CMAKE_VERSION VERSION_LESS 3.18)
      set(DEV_MODULE Development)
    else()
      set(DEV_MODULE Development.Module)
    endif()
    find_package(Python COMPONENTS Interpreter ${DEV_MODULE} REQUIRED)
    
    add_subdirectory(lib/nanobind)
  else()
    message("Using pybind11")
    
    # Get PyBind to stop complaining about the new FindPython
    # TODO: Update CMake minimum required version and PyBind
    find_package(Python COMPONENTS Interpreter Development REQUIRED)
    
    add_subdirectory(lib/pybind11)
  endif()
endif()

if (NODE)
  message("NODE=${NODE}")
  message("NODE evaluates to True")
endif()

if (MODULE)
  message("MODULE=${MODULE}")
  message("MODULE evaluates to True")
endif()

# Add draco add_library
include_directories(${PROJECT_NAME} PUBLIC lib/draco/src ${CMAKE_BINARY_DIR})

file(GLOB bindings_SRC "bindings/*.h" "bindings/*.cpp")
file(GLOB zlib_SRC "lib/opennurbs/zlib/*.h" "lib/opennurbs/zlib/*.c")

# temporarily rename the 3 cpp files that we don't want to compile on OSX
file(RENAME "lib/opennurbs/opennurbs_gl.cpp" "lib/opennurbs/opennurbs_gl.skip")
file(RENAME "lib/opennurbs/opennurbs_unicode_cp932.cpp" "lib/opennurbs/opennurbs_unicode_cp932.skip")
file(RENAME "lib/opennurbs/opennurbs_unicode_cp949.cpp" "lib/opennurbs/opennurbs_unicode_cp949.skip")
file(GLOB opennurbs_SRC "lib/opennurbs/*.h" "lib/opennurbs/*.cpp")
file(RENAME "lib/opennurbs/opennurbs_gl.skip" "lib/opennurbs/opennurbs_gl.cpp")
file(RENAME "lib/opennurbs/opennurbs_unicode_cp932.skip" "lib/opennurbs/opennurbs_unicode_cp932.cpp")
file(RENAME "lib/opennurbs/opennurbs_unicode_cp949.skip" "lib/opennurbs/opennurbs_unicode_cp949.cpp")

file(RENAME "lib/opennurbs/android_uuid/gen_uuid_nt.c" "lib/opennurbs/android_uuid/gen_uuid_nt.skip")
file(GLOB uuid_SRC "lib/opennurbs/android_uuid/*.h" "lib/opennurbs/android_uuid/*.c")
file(RENAME "lib/opennurbs/android_uuid/gen_uuid_nt.skip" "lib/opennurbs/android_uuid/gen_uuid_nt.c")

if(${RHINO3DM_JS})
  # TODO: Don't manually mess with CXX_FLAGS, use add_compile_options instead
  # we will eventually want the following warning flags on both compiles
  # for now, just WASM
  set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wno-overloaded-virtual -Wno-switch -Wno-unknown-pragmas -Wno-unused-private-field")
  if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    message("debug mode")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")
  else()
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Oz")
  endif()
  if(NODE)
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -s MEMORY64=1")
  endif()
  set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -s MODULARIZE=1 -s EXPORT_NAME=rhino3dm  -s ALLOW_MEMORY_GROWTH=1 --bind")
  if(MODULE)
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -s EXPORT_ES6=1")
  endif()
endif()

if(MSVC)
  # TODO: Deal with warning flags when not in MSVC, for PY compiles
  # Remove default warning level from CMAKE_CXX_FLAGS_INIT and replace with /W4
  # This is needed in CMake < 3.20 only
  string (REGEX REPLACE "/W[0-4]" "" CMAKE_CXX_FLAGS_INIT "${CMAKE_CXX_FLAGS_INIT}")
  
  add_compile_options("/MP")  # parallelize solution builds over projects
  # parallelize project builds over files
  set (CMAKE_VS_GLOBALS "${CMAKE_VS_GLOBALS};UseMultiToolTask=true;EnforceProcessCountAcrossBuilds=true")
  add_compile_options("/openmp")  # openmp support
  add_link_options("/INCREMENTAL")  # Incremental linking
endif()

add_definitions(-D_GNU_SOURCE)
add_definitions(-DON_COMPILING_OPENNURBS)
add_definitions(-DOPENNURBS_FREETYPE_INC_)
add_definitions(-DMY_ZCALLOC -DZ_PREFIX)
add_definitions(-DOPENNURBS_ZLIB_LIB_DIR)
add_definitions(-DUNICODE)
add_definitions(-DON_INCLUDE_DRACO)

if(${RHINO3DM_JS})
  # temporary until we adjust opennurbs to be emscripten aware
  if(NODE)
    add_definitions(-DON_64BIT_RUNTIME)
  else()
    add_definitions(-DON_32BIT_RUNTIME)
  endif()
  add_definitions(-DON_LITTLE_ENDIAN)
  add_definitions(-DON_RUNTIME_WASM)

  set(CMAKE_EXECUTABLE_SUFFIX ".js")

  # Get Draco to stop complaining about the new FindPython
  # TODO: Update CMake minimum version and Draco instead
  set(_CMAKE_POLICY_DEFAULT_CMP0148_SAVE_ ${CMAKE_POLICY_DEFAULT_CMP0148})
  set(CMAKE_POLICY_DEFAULT_CMP0148 OLD)
  add_subdirectory(lib/draco)
  set(CMAKE_POLICY_DEFAULT_CMP0148 ${_CMAKE_POLICY_DEFAULT_CMP0148_SAVE_})
  
  add_executable(rhino3dm ${bindings_SRC} ${zlib_SRC} ${opennurbs_SRC} ${uuid_SRC})
  target_link_libraries(rhino3dm ${PROJECT_SOURCE_DIR}/build/javascript/draco_wasm/libdraco.a)
endif()

if (${RHINO3DM_PY})
  if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
    add_definitions(-DON_RUNTIME_LINUX)
    add_definitions(-DON_CLANG_CONSTRUCTOR_BUG)
    if(PYTHON_BINDING_LIB STREQUAL "NANOBIND")
      #need to build nanobind to link it?
      nanobind_build_library(nanobind)
      nanobind_add_module(_rhino3dm ${bindings_SRC} ${opennurbs_SRC} ${zlib_SRC} ${uuid_SRC})
      target_link_libraries(_rhino3dm PRIVATE nanobind)
    else()
      pybind11_add_module(_rhino3dm ${bindings_SRC} ${opennurbs_SRC} ${zlib_SRC} ${uuid_SRC})
      target_link_libraries(_rhino3dm PRIVATE pybind11::module)
    endif()
    #pybind11_add_module(_rhino3dm ${bindings_SRC} ${opennurbs_SRC} ${zlib_SRC} ${uuid_SRC})
    #target_link_libraries(_rhino3dm -luuid)
  else()
    add_library(zlib_static STATIC ${zlib_SRC})
    add_library(opennurbs_static STATIC ${opennurbs_SRC})
    if(PYTHON_BINDING_LIB STREQUAL "NANOBIND")
      #need to build nanobind to link it?
      nanobind_build_library(nanobind)
      nanobind_add_module(_rhino3dm ${bindings_SRC})
      target_link_libraries(_rhino3dm PRIVATE nanobind)
    else()
      pybind11_add_module(_rhino3dm ${bindings_SRC})
      target_link_libraries(_rhino3dm PRIVATE pybind11::module)
    endif()
    
    target_link_libraries(_rhino3dm PRIVATE zlib_static)
    target_link_libraries(_rhino3dm PRIVATE opennurbs_static)
  endif()

  # Get Draco to stop complaining about the new FindPython
  # TODO: Update CMake minimum version and Draco instead
  set(_CMAKE_POLICY_DEFAULT_CMP0148_SAVE_ ${CMAKE_POLICY_DEFAULT_CMP0148})
  set(CMAKE_POLICY_DEFAULT_CMP0148 OLD)
  add_subdirectory(lib/draco)
  set(CMAKE_POLICY_DEFAULT_CMP0148 ${_CMAKE_POLICY_DEFAULT_CMP0148_SAVE_})
  
  if (MSVC)
    target_link_libraries(_rhino3dm PRIVATE debug lib/draco/Debug/draco)
    target_link_libraries(_rhino3dm PRIVATE optimized ${CMAKE_BINARY_DIR}/draco_static/Release/draco.lib)
  else()
    target_link_libraries(_rhino3dm PRIVATE ${CMAKE_BINARY_DIR}/draco_static/libdraco.a)
  endif()
endif()

if (MSVC)
  # TODO: Use W4 or Wall
  # TODO: Use /WX
  # target_compile_options(_rhino3dm PRIVATE "/W3" "/WX")
  target_compile_options(_rhino3dm PRIVATE "/W3")
  # TODO: ON should compile with no level 4 warnings!
  # target_compile_options(opennurbs_static PRIVATE "/W4" "/WX")
  target_compile_options(opennurbs_static PRIVATE "/W3")
endif()
