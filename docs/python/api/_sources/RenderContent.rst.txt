Rendering
=========

Classes related to rendering in Rhino. These include access to various :py:class:`RenderContent` ( :py:class:`RenderMaterial`, :py:class:`RenderTexture`, :py:class:`RenderEnvironment`), settings for rendering, embedded files and so on.

.. py:currentmodule:: rhino3dm

.. py:class:: Bitmap

   .. py:method:: Bitmap()

      Bitmap constructor


   .. py:attribute:: Width


   .. py:attribute:: Height


   .. py:attribute:: BitsPerPixel


   .. py:attribute:: SizeOfScan


   .. py:attribute:: SizeOfImage

.. py:class:: Decal

   .. py:method:: Decal()

      Decal constructor

   .. py:attribute:: TextureInstanceId

      Guid: Gets the texture ID for this decal.

   .. py:attribute:: Mapping

      DecalMapping: Gets the decal's mapping.

   .. py:attribute:: Projection

      DecalProjection: Gets the decal's projection. Used only when mapping is planar.

   .. py:attribute:: MapToInside

      bool: Used only when mapping is cylindrical or spherical.

   .. py:attribute:: Transparency

      float: Gets the decal's transparency in the range 0 to 1.

   .. py:attribute:: Origin

      :py:class:`Point3d`: Gets the origin of the decal in world space.

   .. py:attribute:: VectorUp

      Vector3d: For cylindrical and spherical mapping, the vector is unitized.

   .. py:attribute:: VectorAcross

      Vector3d: Gets the vector across. For cylindrical and spherical mapping, the vector is unitized.

   .. py:attribute:: Height

      float: Gets the height of the decal. Only used when mapping is cylindrical.

   .. py:attribute:: Radius

      float: Gets the radius of the decal. Only used when mapping is cylindrical or spherical.

   .. py:attribute:: HorzSweepStart


   .. py:attribute:: HorzSweepEnd


   .. py:attribute:: VertSweepStart


   .. py:attribute:: VertSweepEnd


   .. py:attribute:: BoundsMinU


   .. py:attribute:: BoundsMinV


   .. py:attribute:: BoundsMaxU


   .. py:attribute:: BoundsMaxV

.. py:class:: Dithering

   .. py:method:: Dithering()

      Dithering constructor


   .. py:attribute:: Enabled


   .. py:attribute:: Method

.. py:class:: EmbeddedFile

   .. py:method:: EmbeddedFile()

      EmbeddedFile constructor

   .. py:attribute:: Length


   .. py:attribute:: Filename

   .. py:staticmethod:: Read(fileName)

      [todo] add documentation

   .. py:method:: Write(fileName)

      [todo] add documentation

   .. py:method:: Clear()

      [todo] add documentation

.. py:class:: Environment

   .. py:method:: Environment()

      Environment constructor

   .. py:attribute:: BackgroundColor

      System.Drawing.Color: The background color.

   .. py:attribute:: BackgroundImage

      Texture: The background image texture.

   .. py:attribute:: BackgroundProjection

      BackgroundProjections: The background projection.

.. py:class:: GroundPlane

   .. py:method:: GroundPlane()

      GroundPlane constructor

   .. py:attribute:: Enabled

      bool: Determines whether the document ground plane is enabled.

   .. py:attribute:: ShowUnderside

      bool: If this is off, the ground plane will not be visible when seen from below.

   .. py:attribute:: Altitude

      float: Height above world XY plane in model units. Auto-altitude is computed if enabled.

   .. py:attribute:: AutoAltitude

      bool: Determines whether the ground plane is fixed by the Altitude property, or whether it is automatically placed at the lowest point in the model.

   .. py:attribute:: ShadowOnly

      bool: Determines whether the ground plane shows the material assigned, or whether it is transparent, but captures shadows.

   .. py:attribute:: MaterialInstanceId

      Guid: Id of material in material table for this ground plane.

   .. py:attribute:: TextureOffset

      Vector2d: Texture mapping offset in world units.

   .. py:attribute:: TextureOffsetLocked

      bool: Texture offset locked.

   .. py:attribute:: TextureSizeLocked

      bool: Texture size locked.

   .. py:attribute:: TextureSize

      Vector2d: Texture mapping single UV span size in world units.

   .. py:attribute:: TextureRotation

      float: Texture mapping rotation around world origin + offset in degrees.

.. py:class:: Light

   .. py:method:: Light()

      Light constructor


   .. py:attribute:: IsEnabled

      bool: Gets or sets a value that defines if the light is turned on (true) or off (false).

   .. py:attribute:: LightStyle

      LightStyle: Gets or sets a light style on this camera.

   .. py:attribute:: IsPointLight

      bool: Gets a value indicating whether the light style
      is  CameraPoint or WorldPoint.

   .. py:attribute:: IsDirectionalLight

      bool: Gets a value indicating whether the light style
      is  CameraDirectional or WorldDirectional.

   .. py:attribute:: IsSpotLight

      bool: Gets a value indicating whether the light style
      is  CameraSpot or WorldSpot.

   .. py:attribute:: IsLinearLight

      bool: Gets a value indicating whether the light style
      is  WorldLinear.

   .. py:attribute:: IsRectangularLight

      bool: Gets a value indicating whether the light style
      is  WorldRectangular.

   .. py:attribute:: Location

      :py:class:`Point3d`: Gets or sets the light or 3D position or location.

   .. py:attribute:: Direction

      Vector3d: Gets or sets the vector direction of the camera.

   .. py:attribute:: PerpendicularDirection

      Vector3d: Gets a perpendicular vector to the camera direction.

   .. py:attribute:: Intensity

      float: Gets or sets the light intensity.

   .. py:attribute:: PowerWatts

      float: Gets or sets the light power in watts (W).

   .. py:attribute:: PowerLumens

      float: Gets or sets the light power in lumens (lm).

   .. py:attribute:: PowerCandela

      float: Gets or sets the light power in candelas (cd).

   .. py:attribute:: Ambient

      System.Drawing.Color: Gets or sets the ambient color.

   .. py:attribute:: Diffuse

      System.Drawing.Color: Gets or sets the diffuse color.

   .. py:attribute:: Specular

      System.Drawing.Color: Gets or sets the specular color.

   .. py:attribute:: AttenuationVector

      Vector3d: Gets or Sets the attenuation vector.

   .. py:attribute:: SpotAngleRadians

      float: Gets or sets the spot angle in radians.
      Ignored for non-spot lights.angle = 0 to pi/2  (0 to 90 degrees).

   .. py:attribute:: SpotExponent

      float: The spot exponent varies from 0.0 to 128.0 and provides
      an exponential interface for controlling the focus or
      concentration of a spotlight (like the
      OpenGL GL_SPOT_EXPONENT parameter).  The spot exponent
      and hot spot parameters are linked; changing one will
      change the other.
      A hot spot setting of 0.0 corresponds to a spot exponent of 128.
      A hot spot setting of 1.0 corresponds to a spot exponent of 0.0.

   .. py:attribute:: HotSpot

      float: The hot spot setting runs from 0.0 to 1.0 and is used to
      provides a linear interface for controlling the focus or
      concentration of a spotlight.
      A hot spot setting of 0.0 corresponds to a spot exponent of 128.
      A hot spot setting of 1.0 corresponds to a spot exponent of 0.0.

   .. py:attribute:: Length

      Vector3d: Gets or sets the height in linear and rectangular lights.
      (ignored for non-linear/rectangular lights.)

   .. py:attribute:: Width

      Vector3d: Gets or sets the width in linear and rectangular lights.
      (ignored for non-linear/rectangular lights.)

   .. py:attribute:: ShadowIntensity

      float: Gets or sets the shadow intensity for the light.

   .. py:attribute:: Name

      str: Gets or sets the spot light name.

   .. py:method:: SetAttenuation(a0, a1, a2)

      Sets the attenuation settings (ignored for "directional" and "ambient" lights).
      attenuation = 1/(a0 + d*a1 + d^2*a2) where d = distance to light.

      :param float a0: The new constant attenuation divisor term.
      :param float a1: The new reverse linear attenuation divisor term.
      :param float a2: The new reverse quadratic attenuation divisor term.


      :rtype: void

   .. py:method:: GetAttenuation(d)

      Gets the attenuation settings (ignored for "directional" and "ambient" lights).
      attenuation = 1/(a0 + d*a1 + d^2*a2) where d = distance to light.

      :param float d: The distance to evaluate.

      :return: 0 if a0 + d*a1 + d^2*a2 <= 0.

      :rtype: float

   .. py:method:: GetSpotLightRadii()

      Gets the spot light radii.


      :return: tuple (bool, float, float)

         - True if operation succeeded; otherwise, false.
         - The inner radius. This out parameter is assigned during this call. \
         - The outer radius. This out parameter is assigned during this call. \

      :rtype: (bool, float, float)

.. py:class:: LinearWorkflow

   .. py:method:: LinearWorkflow()

      LinearWorkflow constructor


   .. py:attribute:: PreProcessTexturesOn


   .. py:attribute:: PreProcessColorsOn


   .. py:attribute:: PreProcessGamma

      float: Linear workflow pre-process gamma value. This is currently the same as the post-process gamma value.

   .. py:attribute:: PreProcessGammaOn


   .. py:attribute:: PostProcessGamma

      float: Linear workflow post-process gamma value.

   .. py:attribute:: PostProcessGammaOn

      bool: Linear workflow post-process gamma enabled state.

.. py:class:: Material

   .. py:method:: Material()

      Material constructor

   .. py:attribute:: RenderPlugInId

      Guid: The Id of the RenderPlugIn that is associated with this material.

   .. py:attribute:: RenderMaterialInstanceId


   .. py:attribute:: Name


   .. py:attribute:: Shine

      float: Gets or sets the shine factor of the material.

   .. py:attribute:: Transparency

      float: Gets or sets the transparency of the material (0.0 = opaque to 1.0 = transparent)

   .. py:attribute:: IndexOfRefraction

      float: Gets or sets the index of refraction of the material, generally
      >= 1.0 (speed of light in vacuum)/(speed of light in material)

   .. py:attribute:: FresnelIndexOfRefraction

      float: Gets or sets the Fresnel index of refraction of the material,
      default is 1.56

   .. py:attribute:: RefractionGlossiness

      float: Gets or sets the refraction glossiness.

   .. py:attribute:: ReflectionGlossiness

      float: Gets or sets the reflection glossiness.

   .. py:attribute:: FresnelReflections

      bool: Gets or sets if Fresnel reflections are used.

   .. py:attribute:: DisableLighting


   .. py:attribute:: Reflectivity

      float: Gets or sets how reflective a material is, 0f is no reflection
      1f is 100% reflective.

   .. py:attribute:: PreviewColor

      System.Drawing.Color: Very simple preview color function for GUIs.

   .. py:attribute:: DiffuseColor


   .. py:attribute:: AmbientColor


   .. py:attribute:: EmissionColor


   .. py:attribute:: SpecularColor


   .. py:attribute:: ReflectionColor


   .. py:attribute:: TransparentColor


   .. py:attribute:: PhysicallyBased


   .. py:staticmethod:: CompareAppearance(material1, material2)

      [todo] add documentation

   .. py:method:: Default()

      Set material to default settings.


      :rtype: void

   .. py:method:: GetTexture(which)

      Get the texture that corresponds with the specified texture type for this material.


      :rtype: Texture

   .. py:method:: GetBitmapTexture()



      :rtype: Texture

   .. py:method:: SetBitmapTexture(fileName)

      :param str fileName: string of path to image texture file
      :rtype: bool

   .. py:method:: SetBitmapTexture(texture)

      :param Texture texture: texture to use as bitmap texture
      :rtype: bool

   .. py:method:: GetBumpTexture()

      Gets the bump texture of this material.

      :return: A texture; or None if no bump texture has been added to this material.

      :rtype: Texture

   .. py:method:: SetBumpTexture(fileName)



      :rtype: bool

   .. py:method:: SetBumpTexture(texture)

      :param Texture texture: texture to use as bump texture
      :rtype: bool

   .. py:method:: GetEnvironmentTexture()



      :rtype: Texture

   .. py:method:: SetEnvironmentTexture(fileName)


      :param Texture texture: texture to use as environment texture
      :rtype: bool

   .. py:method:: SetEnvironmentTexture(texture)



      :rtype: bool

   .. py:method:: GetTransparencyTexture()



      :rtype: Texture

   .. py:method:: SetTransparencyTexture(fileName)



      :rtype: bool

   .. py:method:: SetTransparencyTexture(texture)

      :param Texture texture: texture to use as transparency texture

      :rtype: bool

   .. py:method:: ToPhysicallyBased()



      :rtype: void

.. py:class:: PhysicallyBasedMaterial

   .. py:attribute:: Supported


   .. py:attribute:: Subsurface


   .. py:attribute:: SubsurfaceScatteringRadius


   .. py:attribute:: Metallic


   .. py:attribute:: Specular


   .. py:attribute:: ReflectiveIOR


   .. py:attribute:: SpecularTint


   .. py:attribute:: Roughness


   .. py:attribute:: Anisotropic


   .. py:attribute:: AnisotropicRotation


   .. py:attribute:: Sheen


   .. py:attribute:: SheenTint


   .. py:attribute:: Clearcoat


   .. py:attribute:: ClearcoatRoughness


   .. py:attribute:: OpacityIOR


   .. py:attribute:: Opacity


   .. py:attribute:: OpacityRoughness


   .. py:attribute:: BaseColor


   .. py:attribute:: EmissionColor


   .. py:attribute:: SubsurfaceScatteringColor

.. py:class:: PostEffect

   .. py:method:: PostEffect()

      PostEffect constructor

   .. py:attribute:: Id


   .. py:attribute:: Type


   .. py:attribute:: LocalName


   .. py:attribute:: Listable


   .. py:attribute:: On


   .. py:attribute:: Shown


   .. py:method:: GetParameter()

      [todo] add documentation

   .. py:method:: SetParameter()

      [todo] add documentation

.. py:class:: RenderChannels

   .. py:method:: RenderChannels()

      RenderChannels constructor


   .. py:attribute:: Mode


   .. py:attribute:: CustomIds

.. py:class:: RenderEnvironment

   .. py:method:: RenderEnvironment()

      constructor

   .. py:method:: ToEnvironment()

      [todo] add documentation

.. py:class:: RenderEnvironments

   .. py:method:: RenderEnvironments()

      RenderEnvironments constructor


   .. py:attribute:: BackgroundId


   .. py:attribute:: SkylightingId


   .. py:attribute:: SkylightingOverride


   .. py:attribute:: ReflectionId


   .. py:attribute:: ReflectionOverride

.. py:class:: RenderMaterial

   .. py:method:: RenderMaterial()

      RenderMaterial constructor


   .. py:method:: ToMaterial()

      [todo] add documentation

.. py:class:: RenderSettings

   .. py:method:: RenderSettings()

      RenderSettings constructor


   .. py:attribute:: AmbientLight

      System.Drawing.Color: Gets or sets the ambient light color used in rendering.

   .. py:attribute:: BackgroundColorTop

      System.Drawing.Color: Gets or sets the background top color used in rendering.
      Sets also the background color if a solid background color is set.

   .. py:attribute:: BackgroundColorBottom

      System.Drawing.Color: Gets or sets the background bottom color used in rendering.

   .. py:attribute:: UseHiddenLights

      bool: Gets or sets a value indicating whether to render using lights that are on layers that are off.

   .. py:attribute:: DepthCue

      bool: Gets or sets a value indicating whether to render using depth cues.
      These are clues to help the perception of position and orientation of objects in the image.

   .. py:attribute:: FlatShade

      bool: Gets or sets a value indicating whether to render using flat shading.

   .. py:attribute:: RenderBackFaces

      bool: Gets or sets a value indicating whether to render back faces.

   .. py:attribute:: RenderPoints

      bool: Gets or sets a value indicating whether to instruct the rendering engine to show points.

   .. py:attribute:: RenderCurves

      bool: Gets or sets a value indicating whether to instruct the rendering engine to show curves.

   .. py:attribute:: RenderIsoParams

      bool: Gets or sets a value indicating whether to instruct the rendering engine to show isocurves.

   .. py:attribute:: RenderMeshEdges

      bool: Gets or sets a value indicating whether to instruct the rendering engine to show mesh edges.

   .. py:attribute:: RenderAnnotations

      bool: Gets or sets a value indicating whether to instruct the rendering engine to show annotations,
      such as linear dimensions or angular dimensions.

   .. py:attribute:: UseViewportSize

      bool: Gets or sets a value indicating whether to use the resolution of the
      viewport being rendered or ImageSize when rendering

   .. py:attribute:: ScaleBackgroundToFit

      bool: Gets or sets a value indicating whether to scale the wallpaper in the
      background or not. This is meaningful only if the viewport has a wallpaper
      and render settings are set to render Wallpaper into the background.

   .. py:attribute:: TransparentBackground

      bool: Gets or sets whether rendering should be done with transparent background.

   .. py:attribute:: ImageDpi

      float: Number of dots/inch (dots=pixels) to use when printing and saving
      bitmaps. The default is 72.0 dots/inch.

   .. py:attribute:: ShadowMapLevel

      int: 0=none, 1=normal, 2=best.

   .. py:attribute:: NamedView

      str: Get or set the given named view

   .. py:attribute:: SnapShot

      str: Set or get the given snapshot view

   .. py:attribute:: SpecificViewport

      str: Set or get the given specific viewport

   .. py:attribute:: GroundPlane

      GroundPlane: If this object is associated with a document, this gets the document ground plane.
      If this object is associated with a File3dm, this gets the File3dm's ground plane.
      Otherwise it gets a 'free-floating' ground plane object.

   .. py:attribute:: SafeFrame

      SafeFrame: If this object is associated with a document, this gets the document safe-frame.
      If this object is associated with a File3dm, this gets the File3dm's safe-frame.
      Otherwise it gets a 'free-floating' safe-frame object.

   .. py:attribute:: Dithering

      Dithering: If this object is associated with a document, this gets the document dithering.
      If this object is associated with a File3dm, this gets the File3dm's dithering.
      Otherwise it gets a 'free-floating' dithering object.

   .. py:attribute:: Skylight

      Skylight: If this object is associated with a document, this gets the document skylight.
      If this object is associated with a File3dm, this gets the File3dm's skylight.
      Otherwise it gets a 'free-floating' skylight object.

   .. py:attribute:: LinearWorkflow

      LinearWorkflow: If this object is associated with a document, this gets the document linear workflow.
      If this object is associated with a File3dm, this gets the File3dm's linear workflow.
      Otherwise it gets a 'free-floating' linear workflow object.

   .. py:attribute:: RenderChannels

      RenderChannels: If this object is associated with a document, this gets the document render channels.
      Otherwise it gets a 'free-floating' render channels object.

   .. py:attribute:: Sun

      Sun: If this object is associated with a document, this gets the document sun.
      If this object is associated with a File3dm, this gets the File3dm's sun.
      Otherwise it gets a 'free-floating' sun object.

   .. py:attribute:: RenderEnvironments


   .. py:attribute:: PostEffects

      PostEffectCollection: If this object is associated with a document, this gets the document post effect data collection.
      If this object is associated with a File3dm, this gets the File3dm's post effect data collection.
      Otherwise it gets a 'free-floating' post effect data collection object.

.. py:class:: RenderTexture

   .. py:method:: RenderTexture()

      RenderTexture constructor


   .. py:attribute:: FileName


   .. py:method:: ToTexture()

      [todo] add documentation

.. py:class:: SafeFrame

   .. py:method:: SafeFrame()

      SafeFrame constructor


   .. py:attribute:: Enabled

      bool: Determines whether the safe-frame is enabled.

   .. py:attribute:: PerspectiveOnly

      bool: Show the safe-frame only in perspective views.

   .. py:attribute:: FieldGridOn


   .. py:attribute:: LiveFrameOn

      bool: Turn on the live area, which shows the size of the rendered view as a yellow frame
      in the viewport.

   .. py:attribute:: ActionFrameOn

      bool: Turn on the user specified action area, which shown with blue frames.

   .. py:attribute:: ActionFrameLinked

      bool: Action Frame Linked, On = Use the same scale for X and Y. Off = use
      different scales for X and Y.

   .. py:attribute:: ActionFrameXScale

      float: Action Frame X-scale.
      This value should be in the range 0..1 but it is not clamped.
      It is displayed in the UI in the range 0..100.

   .. py:attribute:: ActionFrameYScale

      float: Action Frame Y-scale.
      This value should be in the range 0..1 but it is not clamped.
      It is displayed in the UI in the range 0..100.

   .. py:attribute:: TitleFrameOn

      bool: Show a user specified title area frame in orange.

   .. py:attribute:: TitleFrameLinked

      bool: Title Frame Linked, On = Use the same scale for X and Y. Off = use
      different scales for X and Y.

   .. py:attribute:: TitleFrameXScale

      float: Title Frame X-scale.
      This value should be in the range 0..1 but it is not clamped.
      It is displayed in the UI in the range 0..100.

   .. py:attribute:: TitleFrameYScale

      float: Title Frame Y-scale.
      This value should be in the range 0..1 but it is not clamped.
      It is displayed in the UI in the range 0..100.

.. py:class:: Skylight

   .. py:method:: Skylight()

      Skylight constructor


   .. py:attribute:: Enabled


   .. py:attribute:: ShadowIntensity

      float: ShadowIntensity is currently unused.

.. py:class:: Sun

   .. py:method:: Sun()

      Sun constructor


   .. py:attribute:: MinYear


   .. py:attribute:: MaxYear


   .. py:attribute:: Vector


   .. py:attribute:: EnableAllowed


   .. py:attribute:: EnableOn


   .. py:attribute:: ManualControlAllowed


   .. py:attribute:: ManualControlOn

      bool: Manual control 'on' state. When true, allows the user to set the sun
      azimuth and altitude directly. When false, the values are computed.

   .. py:attribute:: North

      float: Angle in degrees on world X-Y plane that should be considered north in the model.
      The angle is measured starting at the x-axis and increases anti-clockwise. The y-axis
      corresponds to a 'north' angle of 90 degrees.

   .. py:attribute:: Azimuth

      float: The sun's azimuth in degrees. The value increases Eastwards with North as zero.
      Setting this value will also set the sun to manual control mode.
      Note: This value is not affected by the direction of north.

   .. py:attribute:: Altitude

      float: The sun's altitude above the horizon in degrees in the range -90 to +90.
      Setting this value will also set the sun to manual control mode.

   .. py:attribute:: Latitude

      float: The observer's latitude.

   .. py:attribute:: Longitude

      float: The observer's longitude.

   .. py:attribute:: TimeZone

      float: The observer's time zone measured in hours relative to UTC.

   .. py:attribute:: DaylightSavingOn

      bool: Daylight saving time 'on' state

   .. py:attribute:: DaylightSavingMinutes

      int: Daylight saving time in minutes

   .. py:attribute:: Year


   .. py:attribute:: Month


   .. py:attribute:: Day


   .. py:attribute:: Hours


   .. py:attribute:: Intensity

      float: Sun intensity.

   .. py:attribute:: IsValid


   .. py:attribute:: Light

      Geometry.Light: Get a Light which represents the sun. If manual control is in effect, no sun calculation
      is performed; the function uses the last known values of azimuth and altitude.
      If manual control is not in effect, the observer's position, date, time, time zone and
      daylight saving values are used to calculate the position of the sun.

   .. py:staticmethod:: SunColorFromAltitude()

      [todo] add documentation

.. py:class:: Texture

   .. py:method:: Texture()

      Texture constructor


   .. py:attribute:: FileName

      str: Gets or sets a file name that is used by this texture.
      NOTE: We are moving away from string-based FileName, and suggest
      the usage of the new FileReference class.Also, this filename may well not be a path that makes sense
      on a user's computer because it was a path initially set on
      a different user's computer. If you want to get a workable path
      for this user, use the BitmapTable.Find function using this
      property.

   .. py:attribute:: WrapU

      TextureUvwWrapping: Texture wrapping mode in the U direction

   .. py:attribute:: WrapV

      TextureUvwWrapping: Texture wrapping mode in the V direction

   .. py:attribute:: WrapW

      TextureUvwWrapping: Texture wrapping mode in the W direction

   .. py:attribute:: UvwTransform

      Transform: Transform to be applied to each instance of this texture
      if ApplyUvw is true

   .. py:attribute:: Id

      Guid: Gets the globally unique identifier of this texture.

   .. py:attribute:: Enabled

      bool: If the texture is enabled then it will be visible in the rendered
      display otherwise it will not.

   .. py:attribute:: TextureType

      TextureType: Controls how the pixels in the bitmap are interpreted

   .. py:attribute:: Repeat

      Vector2d: Helper for access to the repeat value encoded in UvwTransform

   .. py:attribute:: Offset

      Vector2d: Helper for access to the offset value encoded in UvwTransform

   .. py:attribute:: Rotation

      float: Helper for access to the rotation value encoded in UvwTransform

   .. py:method:: FileReference()

      [todo] add documentation

.. py:class:: TextureMapping

   .. py:method:: TextureMapping()

      TextureMapping constructor


   .. py:attribute:: RequiresVertexNormals


   .. py:attribute:: IsPeriodic


   .. py:staticmethod:: CreateSurfaceParameterMapping()

      Create a mapping that will convert surface parameters into normalized(0,1)x(0,1) texture coordinates.

      :return: TextureMapping instance or None if failed.

      :rtype: TextureMapping

   .. py:staticmethod:: CreatePlaneMapping(plane, dx, dy, dz)

      Create a planar UV projection texture mapping

      :param Plane plane: A plane to use for mapping.
      :param Interval dx: portion of the plane's x axis that is mapped to [0,1] (can be a decreasing interval)
      :param Interval dy: portion of the plane's y axis that is mapped to [0,1] (can be a decreasing interval)
      :param Interval dz: portion of the plane's z axis that is mapped to [0,1] (can be a decreasing interval)

      :return: TextureMapping instance if input is valid

      :rtype: TextureMapping

   .. py:staticmethod:: CreateCylinderMapping(cylinder, capped)

      Create a cylindrical projection texture mapping.

      :param Cylinder cylinder: cylinder in world space used to define a cylindrical coordinate system. \
         The angular parameter maps (0,2pi) to texture "u" (0,1), The height \
         parameter maps (height[0],height[1]) to texture "v" (0,1), and the \
         radial parameter maps (0,r) to texture "w" (0,1).
      :param bool capped: If true, the cylinder is treated as a finite capped cylinder

      :return: TextureMapping instance if input is valid

      :rtype: TextureMapping

   .. py:staticmethod:: CreateSphereMapping(sphere)

      Create a spherical projection texture mapping.

      :param Sphere sphere: sphere in world space used to define a spherical coordinate system. \
         The longitude parameter maps (0,2pi) to texture "u" (0,1). \
         The latitude parameter maps (-pi/2,+pi/2) to texture "v" (0,1). \
         The radial parameter maps (0,r) to texture "w" (0,1).

      :return: TextureMapping instance if input is valid

      :rtype: TextureMapping

   .. py:staticmethod:: CreateBoxMapping(plane, dx, dy, dz, capped)

      Create a box projection texture mapping.

      :param Plane plane: The sides of the box the box are parallel to the plane's coordinate \
         planes.  The dx, dy, dz intervals determine the location of the sides.
      :param Interval dx: Determines the location of the front and back planes. The vector \
         plane.xaxis is perpendicular to these planes and they pass through \
         plane.PointAt(dx[0],0,0) and plane.PointAt(dx[1],0,0), respectively.
      :param Interval dy: Determines the location of the left and right planes. The vector \
         plane.yaxis is perpendicular to these planes and they pass through \
         plane.PointAt(0,dy[0],0) and plane.PointAt(0,dy[1],0), respectively.
      :param Interval dz: Determines the location of the top and bottom planes. The vector \
         plane.zaxis is perpendicular to these planes and they pass through \
         plane.PointAt(0,0,dz[0]) and plane.PointAt(0,0,dz[1]), respectively.
      :param bool capped: If true, the box is treated as a finite capped box.

      :return: TextureMapping instance if input is valid

      :rtype: TextureMapping

   .. py:method:: TryGetMappingCylinder()

      Get a cylindrical projection parameters from this texture mapping.

      :return: Returns True if a valid cylinder is returned.

      :rtype: bool

   .. py:method:: TryGetMappingSphere()

      Get a spherical projection parameters from this texture mapping.

      :return: Returns True if a valid sphere is returned.

      :rtype: bool

   .. py:method:: ReverseTextureCoordinate(dir)

      [todo] add documentation

   .. py:method:: SwapTextureCoordinate(i, j)

      [todo] add documentation

   .. py:method:: TileTextureCoordinate(dir, count, offset)

      [todo] add documentation

   .. py:method:: Evaluate(p, n)

      Evaluate the mapping to get a texture coordinate

      :param :py:class:`Point3d` p: Vertex location
      :param Vector3d n: If the mapping projection is ray_projection, then this is the vertex unit normal.  Otherwise n is ignored.

      :return: tuple (int, :py:class:`Point3d`)

         - Nonzero if evaluation is successful.  When the mapping is a box or
           capped cylinder mapping, the value indicates which side was evaluated.
           Cylinder mapping: 1 = cylinder wall, 2 = bottom cap, 3 = top cap
           Box mapping: 1 = front, 2 = right, 3 = back, 4 = left, 5 = bottom, 6 = top
         - Texture coordinate (u,v,w)

      :rtype: (int, :py:class:`Point3d`)

.. py:class:: RenderContent

   .. py:method:: RenderContent()

      RenderContent constructor

   .. py:attribute:: Kind


   .. py:attribute:: Parent


   .. py:attribute:: IsChild


   .. py:attribute:: FirstChild


   .. py:attribute:: NextSibling


   .. py:attribute:: TopLevel


   .. py:attribute:: IsTopLevel


   .. py:attribute:: Id


   .. py:attribute:: Name


   .. py:attribute:: TypeName


   .. py:attribute:: TypeId


   .. py:attribute:: RenderEngineId


   .. py:attribute:: PlugInId


   .. py:attribute:: Notes


   .. py:attribute:: Tags


   .. py:attribute:: GroupId


   .. py:attribute:: Hidden


   .. py:attribute:: Reference


   .. py:attribute:: AutoDelete


   .. py:attribute:: ChildSlotName


   .. py:method:: XML(recursive)

      [todo] add documentation

   .. py:method:: SetXML(xml)

      [todo] add documentation

   .. py:method:: ChildSlotOn(child_slot_name)

      [todo] add documentation

   .. py:method:: SetChildSlotOn(on, child_slot_name)

      [todo] add documentation

   .. py:method:: ChildSlotAmount(child_slot_name)

      [todo] add documentation

   .. py:method:: SetChildSlotAmount(amount, child_slot_name)

      [todo] add documentation

   .. py:method:: SetChild(child, child_slot_name)

      [todo] add documentation

   .. py:method:: FindChild(child_slot_name)

      [todo] add documentation

   .. py:method:: DeleteChild(child_slot_name)

      [todo] add documentation

   .. py:method:: GetParameter(param_name)

      [todo] add documentation

   .. py:method:: SetParameter(param_name, param_value)

      [todo] add documentation
