Surfaces
========

.. py:currentmodule:: rhino3dm

.. py:class:: NurbsSurface

   .. py:attribute:: IsRational

      bool: Gets a value indicating whether or not the NURBS surface is rational.

   .. py:attribute:: OrderU

      int: Gets the order in the U direction.

   .. py:attribute:: OrderV

      int: Gets the order in the V direction.

   .. py:attribute:: KnotsU

      Collections.NurbsSurfaceKnotList: The U direction knot vector.

   .. py:attribute:: KnotsV

      Collections.NurbsSurfaceKnotList: The V direction knot vector.

   .. py:attribute:: Points

      Collections.NurbsSurfacePointList: Gets a collection of surface control points that form this surface.

   .. py:staticmethod:: Create(dimension, isRational, order0, order1, controlPointCount0, controlPointCount1)

      Constructs a new NURBS surface with internal uninitialized arrays.

      :param int dimension: The number of dimensions.>= 1. This value is usually 3.
      :param bool isRational: True to make a rational NURBS.
      :param int order0: The order in U direction.>= 2.
      :param int order1: The order in V direction.>= 2.
      :param int controlPointCount0: Control point count in U direction.>= order0.
      :param int controlPointCount1: Control point count in V direction.>= order1.

      :return: A new NURBS surface, or None on error.

      :rtype: NurbsSurface

   .. py:staticmethod:: CreateFromCone(cone)

      Constructs a new NURBS surfaces from cone data.

      :param Cone cone: A cone value.

      :return: A new NURBS surface, or None on error.

      :rtype: NurbsSurface

   .. py:staticmethod:: CreateFromSphere(sphere)

      Constructs a new NURBS surfaces from sphere data.

      :param rhino3dm.Sphere sphere: A sphere value.

      :return: A new NURBS surface, or None on error.

      :rtype: NurbsSurface

   .. py:staticmethod:: CreateFromCylinder(cylinder)

      Constructs a new NURBS surfaces from cylinder data.

      :param Cylinder cylinder: A cylinder value.

      :return: A new NURBS surface, or None on error.

      :rtype: NurbsSurface

   .. py:staticmethod:: CreateRuledSurface(curveA, curveB)

      Constructs a ruled surface between two curves. Curves must share the same knot-vector.

      :param rhino3dm.Curve curveA: First curve.
      :param rhino3dm.Curve curveB: Second curve.

      :return: A ruled surface on success or None on failure.

      :rtype: NurbsSurface

   .. py:method:: MakeRational()

      Makes this surface rational.

      :return: True if the operation succeeded; otherwise, false.

      :rtype: bool

   .. py:method:: MakeNonRational()

      Makes this surface non-rational.

      :return: True if the operation succeeded; otherwise, false.

      :rtype: bool

   .. py:method:: IncreaseDegreeU(desiredDegree)

      Increase the degree of this surface in U direction.

      :param int desiredDegree: The desired degree. \
         Degrees should be number between and including 1 and 11.

      :return: True on success, False on failure.

      :rtype: bool

   .. py:method:: IncreaseDegreeV(desiredDegree)

      Increase the degree of this surface in V direction.

      :param int desiredDegree: The desired degree. \
         Degrees should be number between and including 1 and 11.

      :return: True on success, False on failure.

      :rtype: bool

.. py:class:: NurbsSurfaceKnotList

   .. py:attribute:: IsClampedStart


   .. py:attribute:: IsClampedEnd


   .. py:method:: __len__()

      [todo] add documentation

   .. py:method:: __getitem__()

      [todo] add documentation

   .. py:method:: __setitem__()

      [todo] add documentation

   .. py:method:: ToList()

      [todo] add documentation

   .. py:method:: InsertKnot(value, multiplicity)

      Inserts a knot and update control point locations.
      Does not change parameterization or locus of curve.

      :return: True on success, False on failure.

      :rtype: bool

   .. py:method:: KnotMultiplicity(index)

      Get knot multiplicity.

      :param int index: Index of knot to query.

      :return: The multiplicity (valence) of the knot.

      :rtype: int

   .. py:method:: CreateUniformKnots(knotSpacing)

      Compute a clamped, uniform knot vector based on the current
      degree and control point count. Does not change values of control
      vertices.

      :param float knotSpacing: Spacing of subsequent knots.

      :return: True on success, False on failure.

      :rtype: bool

   .. py:method:: CreatePeriodicKnots(knotSpacing)

      Compute a clamped, uniform, periodic knot vector based on the current
      degree and control point count. Does not change values of control
      vertices.

      :param float knotSpacing: Spacing of subsequent knots.

      :return: True on success, False on failure.

      :rtype: bool

   .. py:method:: SuperfluousKnot(start)

      Computes the knots that are superfluous because they are not used in NURBs evaluation.
      These make it appear so that the first and last surface spans are different from interior spans.
      http://wiki.mcneel.com/developer/onsuperfluousknot

      :param bool start: True if the query targets the first knot. Otherwise, the last knot.

      :return: A component.

      :rtype: float

.. py:class:: NurbsSurfacePointList

   .. py:attribute:: CountU

      int: Gets the number of control points in the U direction of this surface.

   .. py:attribute:: CountV

      int: Gets the number of control points in the V direction of this surface.

   .. py:method:: __len__()

      [todo] add documentation

   .. py:method:: __getitem__()

      [todo] add documentation

   .. py:method:: GetPoint(u, v)

      Gets a world 3-D, or Euclidean, control point at the given (u, v) index.
      The 4-D representation is (x, y, z, 1.0).

      :param int u: Index of control point in the surface U direction.
      :param int v: Index of control point in the surface V direction.

      :return: tuple (bool, rhino3dm.Point3d)

         - True on success, False on failure.
         - Coordinate of control point. \

      :rtype: (bool, rhino3dm.Point3d)

   .. py:method:: GetControlPoint(u, v)

      Gets the control point at the given (u, v) index.

      :param int u: Index of control point in the surface U direction.
      :param int v: Index of control point in the surface V direction.

      :return: The control point at the given (u, v) index.

      :rtype: ControlPoint

   .. py:method:: __setitem__()

      [todo] add documentation

   .. py:method:: MakeRational()

      [todo] add documentation

   .. py:method:: MakeNonRational()

      [todo] add documentation

.. py:class:: Plane

   .. py:method:: Plane()

      Plane constructor


   .. py:method:: Plane(origin, normal)

      Constructs a plane from a point and a normal vector.

      :param rhino3dm.Point3d origin: Origin point of the plane.
      :param rhino3dm.Vector3d normal: Non-zero normal to the plane.

   .. py:method:: Plane(origin, xPoint, yPoint)

      Initializes a plane from three non-collinear points.

      :param rhino3dm.Point3d origin: Origin point of the plane.
      :param rhino3dm.Point3d xPoint: Second point in the plane. The x-axis will be parallel to x_point-origin.
      :param rhino3dm.Point3d yPoint: Third point on the plane that is not collinear with the first two points. \
         taxis*(y_point-origin) will be > 0.

   .. py:method:: Plane(origin, xDirection, yDirection)

      Constructs a plane from a point and two vectors in the plane.

      :param rhino3dm.Point3d origin: Origin point of the plane.
      :param rhino3dm.Vector3d xDirection: Non-zero vector in the plane that determines the x-axis direction.
      :param rhino3dm.Vector3d yDirection: Non-zero vector not parallel to x_dir that is used to determine the \
         y-axis direction. y_dir does not need to be perpendicular to x_dir.

   .. py:method:: Plane()

      Constructs a plane from an equation
      Ax+By+Cz+D=0.


   .. py:attribute:: Origin

      rhino3dm.Point3d: Gets or sets the origin point of this plane.

   .. py:attribute:: XAxis

      rhino3dm.Vector3d: Gets or sets the X axis vector of this plane.

   .. py:attribute:: YAxis

      rhino3dm.Vector3d: Gets or sets the Y axis vector of this plane.

   .. py:attribute:: ZAxis

      rhino3dm.Vector3d: Gets or sets the Z axis vector of this plane.

   .. py:staticmethod:: WorldXY()

      [todo] add documentation

   .. py:staticmethod:: WorldYZ()

      [todo] add documentation

   .. py:staticmethod:: WorldZX()

      [todo] add documentation

   .. py:staticmethod:: Unset()

      [todo] add documentation

   .. py:method:: Encode()

      [todo] add documentation

   .. py:staticmethod:: Decode(jsonObject)

      [todo] add documentation

.. py:class:: PlaneSurface

   .. py:method:: PlaneSurface()

      PlaneSurface constructor


   .. py:method:: PlaneSurface()

      PlaneSurface constructor

.. py:class:: RevSurface

   .. py:method:: RevSurface()

      RevSurface constructor


   .. py:staticmethod:: Create(revoluteCurve, axisOfRevolution, startAngle, endAngle)

      Constructs a new surface of revolution from a generatrix curve and an axis.
      This overload accepts a slice start and end angles.

      :param rhino3dm.Curve revoluteCurve: A generatrix.
      :param Line axisOfRevolution: An axis.
      :param float startAngleRadians: An angle in radians for the start.
      :param float endAngleRadians: An angle in radians for the end.

      :return: A new surface of revolution, or None if any of the inputs is invalid or on error.

      :rtype: RevSurface

.. py:class:: Surface

   .. py:attribute:: IsSolid

      bool: Gets a values indicating whether a surface is solid.

   .. py:method:: SetDomain(direction, domain)

      Sets the domain in a direction.

      :param int direction: 0 sets first parameter's domain, 1 sets second parameter's domain.
      :param rhino3dm.Interval domain: A new domain to be assigned.

      :return: True if setting succeeded, otherwise false.

      :rtype: bool

   .. py:method:: Degree(direction)

      Returns the maximum algebraic degree of any span
      (or a good estimate if curve spans are not algebraic).

      :param int direction: 0 gets first parameter's domain, 1 gets second parameter's domain.

      :return: The maximum degree.

      :rtype: int

   .. py:method:: SpanCount(direction)

      Gets number of smooth nonempty spans in the parameter direction.

      :param int direction: 0 gets first parameter's domain, 1 gets second parameter's domain.

      :return: The span count.

      :rtype: int

   .. py:method:: PointAt(u, v)

      Evaluates a point at a given parameter.

      :param float u: evaluation parameters.
      :param float v: evaluation parameters.

      :return: Point3d.Unset on failure.

      :rtype: rhino3dm.Point3d

   .. py:method:: FrameAt(u, v)

      Computes the orient plane on a surface given a U and V parameter.
      This is the simple evaluation call with no error handling.

      :param float u: A first parameter.
      :param float v: A second parameter.

      :return: tuple (bool, rhino3dm.Plane)

         - True if this operation succeeded; otherwise false.
         - A frame plane that will be computed during this call. \

      :rtype: (bool, rhino3dm.Plane)

   .. py:method:: Domain(direction)

      Gets the domain in a direction.

      :param int direction: 0 gets first parameter, 1 gets second parameter.

      :return: An interval value.

      :rtype: rhino3dm.Interval

   .. py:method:: GetSpanVector(direction)

      Gets array of span "knots".

      :param int direction: 0 gets first parameter's domain, 1 gets second parameter's domain.

      :return: An array with span vectors; or None on error.

      :rtype: float[]

   .. py:method:: NormalAt(u, v)

      Computes the surface normal at a point.
      This is the simple evaluation call - it does not support error handling.

      :param float u: A U parameter.
      :param float v: A V parameter.

      :return: The normal.

      :rtype: rhino3dm.Vector3d

   .. py:method:: IsClosed(direction)

      Gets a value indicating if the surface is closed in a direction.

      :param int direction: 0 = U, 1 = V.

      :return: The indicating boolean value.

      :rtype: bool

   .. py:method:: IsPeriodic(direction)

      Gets a value indicating if the surface is periodic in a direction (default is false).

      :param int direction: 0 = U, 1 = V.

      :return: The indicating boolean value.

      :rtype: bool

   .. py:method:: IsSingular(side)

      True if surface side is collapsed to a point.

      :param int side: side of parameter space to test \
         0 = south, 1 = east, 2 = north, 3 = west.

      :return: True if this specific side of the surface is singular; otherwise, false.

      :rtype: bool

   .. py:method:: IsAtSingularity(u, v, exact)

      Tests if a surface parameter value is at a singularity.

      :param float u: Surface u parameter to test.
      :param float v: Surface v parameter to test.
      :param bool exact: If true, test if (u,v) is exactly at a singularity. \
         If false, test if close enough to cause numerical problems.

      :return: True if surface is singular at (s,t)

      :rtype: bool

   .. py:method:: IsAtSeam(u, v)

      Tests if a surface parameter value is at a seam.

      :param float u: Surface u parameter to test.
      :param float v: Surface v parameter to test.

      :return: 0 if not a seam, \
         1 if u == Domain(0)[i] and srf(u, v) == srf(Domain(0)[1-i], v) \
         2 if v == Domain(1)[i] and srf(u, v) == srf(u, Domain(1)[1-i]) \
         3 if 1 and 2 are true.

      :rtype: int

   .. py:method:: IsoCurve(direction, constantParameter)

      Gets isoparametric curve.

      :param int direction: 0 first parameter varies and second parameter is constant \
         e.g., point on IsoCurve(0,c) at t is srf(t,c) \
         This is a horizontal line from left to right \
         \
         1 first parameter is constant and second parameter varies \
         e.g., point on IsoCurve(1,c) at t is srf(c,t \
         This is a vertical line from bottom to top.
      :param float constantParameter: The parameter that was constant on the original surface.

      :return: An isoparametric curve or None on error.

      :rtype: rhino3dm.Curve

   .. py:method:: ToNurbsSurface()

      Gets a NURBS surface representation of this surface. Default
      tolerance of 0.0 is used.

      :return: NurbsSurface on success, None on failure.

      :rtype: NurbsSurface

   .. py:method:: ToNurbsSurface(tolerance)

      Gets a NURBS surface representation of this surface. Default
      tolerance of 0.0 is used.

      :return: NurbsSurface on success, None on failure.

      :rtype: NurbsSurface

   .. py:method:: IsPlanar(tolerance)

      Tests a surface to see if it is planar to zero tolerance.

      :return: True if the surface is planar (flat) to within RhinoMath.ZeroTolerance units (1e-12).

      :rtype: bool

   .. py:method:: IsSphere(tolerance)

      Determines if the surface is a portion of a sphere within RhinoMath.ZeroTolerance.

      :return: True if the surface is a portion of a sphere.

      :rtype: bool

   .. py:method:: IsCylinder(tolerance)

      Determines if the surface is a portion of a cylinder within RhinoMath.ZeroTolerance.

      :return: True if the surface is a portion of a cylinder.

      :rtype: bool

   .. py:method:: IsCone(tolerance)

      Determines if the surface is a portion of a cone within RhinoMath.ZeroTolerance.

      :return: True if the surface is a portion of a cone.

      :rtype: bool

   .. py:method:: IsTorus(tolerance)

      Determines if the surface is a portion of a torus within RhinoMath.ZeroTolerance.

      :return: True if the surface is a portion of a torus.

      :rtype: bool

   .. py:method:: GetSurfaceParameterFromNurbsFormParameter(nurbsS, nurbsT)

      Translates a parameter from a value on the surface returned by  to the current surface.

      :param float nurbsS: The parameter in the S, or sometimes U, direction of the NURBS form surface.
      :param float nurbsT: The parameter in the T, or sometimes V, direction of the NURBS form surface.

      :return: tuple (bool, float, float)

         - True if the operation succeeded; otherwise, false.
         - S on this surface. \
         - T o n this surface. \

      :rtype: (bool, float, float)

   .. py:method:: GetNurbsFormParameterFromSurfaceParameter(surfaceS, surfaceT)

      Translates a parameter from the current surface to the parameter space of the surface returned by .

      :param float surfaceS: The parameter in the S, or sometimes U, direction, of this surface.
      :param float surfaceT: The parameter in the T, or sometimes V, direction of this surface.

      :return: tuple (bool, float, float)

         - True if the operation succeeded; otherwise, false.
         - S on the NURBS form. \
         - T on the NURBS form. \

      :rtype: (bool, float, float)

.. py:class:: SurfaceProxy
