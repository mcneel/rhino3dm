Annotations
===========

.. py:currentmodule:: rhino3dm

.. py:class:: AnnotationBase

   .. py:attribute:: RichText

      Text including additional RTF formatting information

      :type: str

   .. py:attribute:: PlainText

      Text stripped of RTF formatting information

      :type: str

   .. py:attribute:: PlainTextWithFields

      Text stripped of RTF formatting information and with field expressions intact

      :type: str

   .. py:attribute:: DimensionStyleId

      Get Id of the DimensionStyle assigned to this annotation

      :type: uuid

   .. py:attribute:: AnnotationType

      Get annotation type of the this annotation

      :type: AnnotationTypes

   .. py:method:: WrapText(wrapwidth)

      Wraps text for given width

   .. py:attribute:: TextIsWrapped

      Get or set whether the text for the annotation should be wrapped

      :type: bool

   .. py:attribute:: Plane

      Get the plane for this annotation

      :type: Plane

.. py:class:: AnnotationTypes

   Enum defining all annotation types available

   .. py:attribute:: Unset

      Annotation type not set

   .. py:attribute:: Aligned

      Aligned annotation type, presented by :py:class:`DimLinear`

   .. py:attribute:: Angular

      Angle annotation type, represented by :py:class:`DimAngular`

   .. py:attribute:: Diameter

      Annotation denoting diameter, represented by :py:class:`DimRadial`

   .. py:attribute:: Radius

      Annotation denoting radius, represented by :py:class:`DimRadial`

   .. py:attribute:: Rotated

      Aligned annotation type, but with definition points not on the same height, represented by :py:class:`DimLinear`

   .. py:attribute:: Ordinate

      Ordinate annotation type, represented by :py:class:`DimOrdinate`

   .. py:attribute:: ArcLen

   .. py:attribute:: CenterMark

      Centermark annotation, represented by :py:class:`Centermark`

   .. py:attribute:: Text

   .. py:attribute:: Leader

      Leader annotation, represented by :py:class:`Leader`

   .. py:attribute:: Angular3pt

      Angle annotation type, represented by :py:class:`DimAngular`

.. py:class:: Centermark(Dimension)

   Annotation representing :py:class:`AnnotationTypes.CenterMark`.

   .. py:method:: GetDisplayLines(dimstyle)

      Get a list of :py:class:`Line` that form the center mark.

      :param DimensionStyle dimstyle: :py:class:`DimensionStyle` to use

      :rtype: list[Line]

.. py:class:: Dimension(AnnotationBase)

   Base class for most annotation classes

.. py:class:: DimensionStyle

   .. py:method:: DimensionStyle()

      Constructor

   .. py:attribute:: Name

   .. py:attribute:: Font

   .. py:attribute:: ArrowBlockId1

   .. py:attribute:: ArrowBlockId2

   .. py:attribute:: LeaderArrowBlockId

   .. py:attribute:: SuppressExtension1

   .. py:attribute:: SuppressExtension2

   .. py:attribute:: SuppressArrow1

   .. py:attribute:: SuppressArrow2

   .. py:attribute:: AlternateBelowLine

   .. py:attribute:: DrawTextMask

   .. py:attribute:: LeaderHasLanding

   .. py:attribute:: DrawForward

   .. py:attribute:: TextUnderlined

   .. py:attribute:: ArrowLength

   .. py:attribute:: LeaderArrowLength

   .. py:attribute:: CentermarkSize

   .. py:attribute:: TextGap

   .. py:attribute:: TextHEight

   .. py:attribute:: TextHeight

   .. py:attribute:: LengthFactor

   .. py:attribute:: AlternateLengthFactor

   .. py:attribute:: ToleranceUpperValue

   .. py:attribute:: ToleranceLowerValue

   .. py:attribute:: ToleranceHeightScale

   .. py:attribute:: BaselineSpacing

   .. py:attribute:: TextRotation

   .. py:attribute:: StackHeightScale

   .. py:attribute:: LeaderLandingLength

   .. py:attribute:: HasFieldOverrides

      Checks if any fields in this DimensionStyle are overrides

      :rtype: bool

   .. py:attribute:: IsChild

      Tests if this DimensionStyle is a child of any other DimensionStyle

      :rtype: bool

   .. py:attribute:: ParentId

      Get or Set the Id of this DimensionStyle's parent.
      If ParentId is Guid.Empty, this DimensionStyle has no parent

      :rtype: uuid

   .. py:method:: ScaleLengthValues(scale)

      Scales all length values by 'scale'

   .. py:method:: IsFieldOverridden(field)

      [todo] add documentation

      :rtype: bool

   .. py:method:: SetFieldOverride(field)

      Set a field as overridden

      :rtype: None

   .. py:method:: ClearFieldOverride(field)

      Set the field as not overridden

      :rtype: None

   .. py:method:: ClearAllFieldOverrides()

      Sets all the fields in this DimensionStyle to be not overridden
      Does not change any dimstyle_id's or parent_id's

      :rtype: None

   .. py:method:: IsChildOf(id)

      Tests if this DimensionStyle is a child of a specific DimensionStyle

      :return: True if this is a child of the DimensionStyle with Parent \
         False otherwise.

      :rtype: bool

.. py:class:: DimAngular(Dimension)

   Annotation representing :py:class:`AnnotationTypes.Angular` and :py:class:`AnnotationTypes.Angular3pt`.

   .. py:attribute:: Points

      Gets list of :py:class:`Point3d` that froms a polyline representing the dimension lines. The different points are given with the following key names:

      * ``'centerpt'`` :py:class:`Point3d` denoting the center of the angular dimension
      * ``'defpt1'`` :py:class:`Point3d` denoting the first definition point
      * ``'defpt2'`` :py:class:`Point3d` denoting the second definition point
      * ``'arrowpt1'`` :py:class:`Point3d` denoting the place of the tip of the first arrow head
      * ``'arrowpt2'`` :py:class:`Point3d` denoting the place of the tip of the second arrow head
      * ``'dimlinept'`` :py:class:`Point3d` denoting the dimension line start
      * ``'textpt'`` :py:class:`Point3d` denoting the text location of the annotation

      :rtype: dict[str, Point3d]

   .. py:method:: GetDisplayLines(dimstyle)

      Get a dictionary with the fields ``'lines'``, ``'arcs'`` and ``'text_rect'``.

      The list contained by ``'lines'`` is a list of :py:class:`Line` that are all straight line work for this dimension.

      The list contained by ``'arcs'`` is a list of :py:class:`Arc` that are all arc line work for this dimension.

      The list contained by ``'text_rect'`` constains a list of :py:class:`Point3d` for the box containing the dimension text.

      :param DimensionStyle dimstyle: :py:class:`DimensionStyle` to use

      :rtype: dict[str, list[Line|Arc|Point3d]]

   .. py:attribute:: Radius

      Get radius of the arc segment

      :rtype: float

   .. py:attribute:: Angle

      Get angle of the arc segment

      :rtype: float

.. py:class:: DimLinear(Dimension)

   Annotation representing :py:class:`AnnotationTypes.Aligned` and :py:class:`AnnotationTypes.Rotated`.

   .. py:attribute:: Points

      Gets list of :py:class:`Point3d` that is a polyline representing the leader lines

      :rtype: list[Point3d]

   .. py:method:: GetDisplayLines(dimstyle)

      Get a dictionary with the fields ``'lines'`` and ``'text_rect'``.

      The list contained by ``'lines'`` is a list of :py:class:`Line` that are all the line work for this dimension.

      The list contained by ``'text_rect'`` constains a list of :py:class:`Point3d` for the box containing the dimension text.

      :param DimensionStyle dimstyle: :py:class:`DimensionStyle` to use

      :rtype: dict[str, list[Line|Point3d]]

.. py:class:: DimRadial(Dimension)

   Annotation representing :py:class:`AnnotationTypes.Radius` and :py:class:`AnnotationTypes.Diameter`.

   .. py:attribute:: Points

      Gets list of :py:class:`Point3d` that from the lienwork the dimension lines. The different points are given with the following key names:

      * ``'centerpt'`` :py:class:`Point3d` denoting the center of the angular dimension, here you would place the center mark
      * ``'defpt1'`` :py:class:`Point3d` denoting the first definition point
      * ``'radiuspt'`` :py:class:`Point3d` denoting the radius point
      * ``'dimlinept'`` :py:class:`Point3d` dimension line point
      * ``'kneept'`` :py:class:`Point3d` knee point in the dimension line

      :rtype: dict[str, Point3d]

   .. py:method:: GetDisplayLines(dimstyle)

      Get a dictionary with the fields ``'lines'`` and ``'text_rect'``.

      The list contained by ``'lines'`` is a list of :py:class:`Line` that are all the line work for this dimension.

      The list contained by ``'text_rect'`` constains a list of :py:class:`Point3d` for the box containing the dimension text.

      :param DimensionStyle dimstyle: :py:class:`DimensionStyle` to use

      :rtype: dict[str, list[Line|Point3d]]

.. py:class:: DimOrdinate(Dimension)

   Annotation representing :py:class:`AnnotationTypes.Ordinate`.

   .. py:attribute:: Points

      Gets list of :py:class:`Point3d` that from the linework of the dimension lines. The different points are given with the following key names:

      * ``'basept'`` :py:class:`Point3d` Base point from which the ordinate dimension is calculated
      * ``'defpt'`` :py:class:`Point3d` denoting the first definition point
      * ``'leaderpt'`` :py:class:`Point3d` denoting the leader point
      * ``'kinkpt1'`` :py:class:`Point3d` first kink point
      * ``'kinkpt2'`` :py:class:`Point3d` second kink point

      :rtype: dict[str, Point3d]

   .. py:method:: GetDisplayLines(dimstyle)

      Get a dictionary with the fields ``'lines'`` and ``'text_rect'``.

      The list contained by ``'lines'`` is a list of :py:class:`Line` that are all the line work for this dimension.

      The list contained by ``'text_rect'`` constains a list of :py:class:`Point3d` for the box containing the dimension text.

      :param DimensionStyle dimstyle: :py:class:`DimensionStyle` to use

      :rtype: dict[str, list[Line|Point3d]]

.. py:class:: Leader(AnnotationBase)

   Annotation representing :py:class:`AnnotationTypes.Leader`.

   .. py:attribute:: Points

      Gets list of :py:class:`Point3d` that is a polyline representing the leader lines

      :rtype: list[Point3d]

   .. py:method:: GetTextPoint2d(dimstyle, leaderscale)

      Get a :py:class:`Point2d` where the text for the leader is located in the annotation plane

      :param DimensionStyle dimstyle: :py:class:`DimensionStyle` to use
      :param float leaderscale: Scale factor to use

      :rtype: Point2d

.. py:class:: TextDot

   .. py:method:: TextDot()

      Constructor

   .. py:attribute:: Point

      Get or set the position of the text dot.

      :rtype: Point3d

   .. py:attribute:: Text

      Get or set the primary text of the text dot.

      :rtype: str

   .. py:attribute:: SecondaryText

      Get or set the secondary text of the text dot.

      :rtype: str

   .. py:attribute:: FontHeight

      Get or set height of font used for displaying the dot

      :rtype: int

   .. py:attribute:: FontFace

      Get or set font face used for displaying the dot

      :rtype: str
